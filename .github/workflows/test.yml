name: Test

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11, 3.12]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml', '**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,enhanced,monitoring]"

      - name: Run code formatting checks
        run: |
          black --check src/ tests/
          isort --check-only src/ tests/

      - name: Run linting
        run: |
          flake8 src/ tests/

      - name: Run type checking
        run: |
          mypy src/

      - name: Run tests with coverage
        run: |
          pytest --cov=src/ctxcard_gen --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

  test-integration:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        python-version: [3.11]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,enhanced,monitoring]"

      - name: Run integration tests
        run: |
          pytest -m integration --cov=src/ctxcard_gen --cov-report=term-missing

      - name: Run CLI tests
        run: |
          pytest -m cli --cov=src/ctxcard_gen --cov-report=term-missing

      - name: Run performance tests
        run: |
          pytest -m performance --cov=src/ctxcard_gen --cov-report=term-missing

  test-full-suite:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        python-version: [3.11]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,enhanced,monitoring]"

      - name: Run complete test suite
        run: |
          python run_tests.py --all --verbose

      - name: Generate test report
        run: |
          pytest --junitxml=test-results.xml --cov=src/ctxcard_gen --cov-report=html

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            test-results.xml
            htmlcov/
            .coverage

  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run security checks
        run: |
          # Check for common security issues
          bandit -r src/ -f json -o bandit-report.json || true
          safety check || true

      - name: Upload security report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-report
          path: bandit-report.json

  build:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        python-version: [3.8, 3.11]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-${{ matrix.python-version }}
          path: dist/
