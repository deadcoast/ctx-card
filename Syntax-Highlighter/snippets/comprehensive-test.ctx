# Comprehensive CTX-CARD Syntax Highlighting Test
# This file tests ALL CTX-CARD elements and syntax highlighting features

ID: proj|testApp lang|py,ts std|pep8,eslint ts|20241201

AL: cfg=>Configuration svc=>Service repo=>Repository dto=>DataTransferObject
AL: uc=>UseCase http=>HTTP db=>Database jwt=>JWT api=>API

NM: module | ^[a-z_]+$ | auth_service
NM: class  | ^[A-Z][A-Za-z0-9]+$ | AuthService
NM: func   | ^[a-z_]+$ | issue_token
NM: var    | ^[a-z_]+$ | user_repo

MO: #1 | auth/service.py | {svc,auth,api}
MO: #2 | auth/repository.py | {repo,auth,db}
MO: #3 | auth/dto.py | {dto,auth}
MO: #4 | utils/helpers.py | {util}
MO: #5 | config/settings.py | {cfg}

SY: #1.#1 | cls | AuthService
SY: #1.#2 | fn  | login
SY: #1.#3 | fn  | refresh_token
SY: #1.#4 | fn  | logout
SY: #2.#1 | cls | UserRepository
SY: #3.#1 | cls | UserCreds
SY: #3.#2 | cls | AuthToken
SY: #4.#1 | fn  | validate_email
SY: #4.#2 | fn  | sanitize_input
SY: #5.#1 | cls | Settings

SG: #1.#2 | (UserCreds)->AuthToken !raises[AuthError,ValidationError]
SG: #1.#3 | (str)->AuthToken !raises[AuthError]
SG: #1.#4 | ()->None !raises[AuthError]
SG: #2.#1 | (db:Database)->None
SG: #4.#1 | (str)->bool
SG: #4.#2 | (str)->str
SG: #5.#1 | ()->Settings

MD: #1.#2 | {classmethod}
MD: #2.#1 | {singleton}
MD: #4.#1 | {staticmethod}

ED: #1.#2 -> #2.#1 | uses:repo
ED: #1.#2 -> #3.#1 | accepts:dto
ED: #1.#2 -> #3.#2 | returns:dto
ED: #1.#3 -> #2.#1 | uses:repo
ED: #1.#2 -> #4.#1 | uses:util
ED: #1.#2 -> #4.#2 | uses:util
ED: #1.#3 -> #4.#1 | uses:util
ED: #1.#4 -> #2.#1 | uses:repo
ED: #5.#1 -> #4.#2 | uses:util

DT: UserCreds | {email:str,password:str,remember:bool}
DT: AuthToken | {jwt:str,exp:datetime,user_id:int}
DT: Settings | {debug:bool,port:int,host:str}

TK: Role | {admin,staff,viewer,guest}
TK: Status | {active,inactive,suspended}
TK: Method | {GET,POST,PUT,DELETE,PATCH}

ER: AuthError | domain | authentication failure
ER: ValidationError | domain | input validation failure
ER: ConfigError | system | configuration error

IN: login ⇒ requires(valid(creds)) ∧ ensures(token.exp>now)
IN: refresh_token ⇒ requires(valid(jwt)) ∧ ensures(new_token.exp>old_token.exp)
IN: validate_email ⇒ requires(email != null) ∧ ensures(result ∈ {true,false})

CN: async fn end with _async
CN: repos never import svc
CN: all public fn have type hints
CN: use snake_case for variables
CN: use PascalCase for classes

IO: POST /v1/login | UserCreds | AuthToken | 200,401,422
IO: POST /v1/refresh | str | AuthToken | 200,401
IO: DELETE /v1/logout | None | None | 200,401
IO: GET /v1/user | None | UserCreds | 200,401

PX: forbid bare except | error-handling
PX: forbid global state in svc | concurrency
PX: forbid print() in production | logging
PX: forbid mutable defaults | side-effects
PX: forbid wildcard imports | namespace-pollution

EX: var(repo) => user_repo (not usersRepo)
EX: fn(async) => login_async (not loginAsync)
EX: cls(auth) => AuthService (not authService)
EX: mod(util) => utils (not Utils)

RV: Check invariants (IN) on public fn
RV: Verify error handling (ER) coverage
RV: Validate naming conventions (NM)
RV: Review API contracts (IO)
RV: Ensure prohibited patterns (PX) compliance

# Delta section for changes
DELTA: MO: #6 | new/feature.py | {feature}
DELTA: SY: #6.#1 | fn | new_function
DELTA: SG: #6.#1 | ()->None
DELTA: ED: #6.#1 -> #4.#1 | uses:util
